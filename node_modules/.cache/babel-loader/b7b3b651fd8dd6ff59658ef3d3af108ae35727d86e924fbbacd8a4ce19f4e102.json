{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\React-App-1\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar() {\n  _s();\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  let [filter, setFilter] = useState(\"\");\n  let filteredMenuItems = menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase()) // Filter by the filter text\n  );\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    console.log(\"Added menu item\");\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    //   setMenuItems([item, ...menuItems])\n  }, []);\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setMenuItems([...menuItems, newMenuItem]); // Add new menu item to the list\n        setNewMenuItem(\"\"); // Clear input after adding\n      },\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredMenuItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","newMenuItem","setNewMenuItem","menuItems","setMenuItems","initialMenuItems","filter","setFilter","filteredMenuItems","item","toLowerCase","includes","addMenuItem","console","log","event","target","value","map","index"],"sources":["C:/Users/Admin/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\r\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\r\nexport default function Sidebar() {\r\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\r\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\r\n  let [menuItems, setMenuItems] = useState(initialMenuItems)\r\n  let [filter, setFilter] = useState(\"\")\r\n\r\n  let filteredMenuItems = menuItems.filter((item) =>\r\n    item.toLowerCase().includes(filter.toLowerCase()) // Filter by the filter text\r\n  );\r\n  // Adds a single string passed in as parameter to the state element\r\n  // \"menuItems\" that holds the set of current menu items.\r\n  let addMenuItem = useCallback(() => {\r\n    console.log(\"Added menu item\")\r\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\r\n    //   // This involves adding a parameter and changing a class instance variable (props).\r\n    //   setMenuItems([item, ...menuItems])\r\n  }, [])\r\n\r\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\r\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\r\n\r\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\r\n  // its own item.\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        id=\"newMenuItemValue\"\r\n        value={newMenuItem}\r\n        onChange={(event) => setNewMenuItem(event.target.value)}\r\n      ></input>\r\n      <br />\r\n      <button\r\n        onClick={() => {\r\n          setMenuItems([...menuItems, newMenuItem]); // Add new menu item to the list\r\n          setNewMenuItem(\"\"); // Clear input after adding\r\n        }}\r\n      >\r\n        Add Item\r\n      </button>\r\n      <br />\r\n      <input\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) => setFilter(event.target.value)}\r\n        placeholder=\"Filter by...\"\r\n      ></input>\r\n      {/* Render the filtered list of menu items */}\r\n      <ul>\r\n        {filteredMenuItems.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,IAAI,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAACO,gBAAgB,CAAC;EAC1D,IAAI,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,IAAIU,iBAAiB,GAAGL,SAAS,CAACG,MAAM,CAAEG,IAAI,IAC5CA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACL,MAAM,CAACI,WAAW,EAAE,CAAC,CAAC;EAAA,CACnD;EACD;EACA;EACA,IAAIE,WAAW,GAAGb,WAAW,CAAC,MAAM;IAClCc,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B;IACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;;EAEA;EACA;EACA,oBACE;IAAA,wBACE;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEb,WAAY;MACnB,QAAQ,EAAGc,KAAK,IAAKb,cAAc,CAACa,KAAK,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,OAAO,EAAE,MAAM;QACbb,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEF,WAAW,CAAC,CAAC,CAAC,CAAC;QAC3CC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;MACtB,CAAE;MAAA,UACH;IAED;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEI,MAAO;MACd,QAAQ,EAAGS,KAAK,IAAKR,SAAS,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QACnB,eAET;MAAA,UACGT,iBAAiB,CAACU,GAAG,CAAC,CAACT,IAAI,EAAEU,KAAK,kBACjC;QAAA,UAAiBV;MAAI,GAAZU,KAAK;QAAA;QAAA;QAAA;MAAA,QACf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GAxDuBnB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}